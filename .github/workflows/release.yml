name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binaries
      run: |
        # Create release directory
        mkdir -p release
        
        # Build flags
        VERSION=${{ steps.version.outputs.VERSION }}
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        LDFLAGS="-X main.version=${VERSION} -X main.commit=${COMMIT_HASH} -X main.buildTime=${BUILD_TIME} -s -w"
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
          "windows/arm64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r GOOS GOARCH <<< "$platform"
          
          case $GOOS in
            "linux")
              OS_NAME="Linux"
              ;;
            "darwin")
              OS_NAME="Darwin"
              ;;
            "windows")
              OS_NAME="Windows"
              ;;
          esac
          
          case $GOARCH in
            "amd64")
              ARCH_NAME="x86_64"
              ;;
            "arm64")
              ARCH_NAME="arm64"
              ;;
          esac
          
          output_name="claudeproxy_${OS_NAME}_${ARCH_NAME}"
          if [ $GOOS = "windows" ]; then
            output_name+='.exe'
          fi
          
          echo "Building for $GOOS/$GOARCH -> $output_name"
          
          env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build \
            -ldflags="${LDFLAGS}" \
            -o release/${output_name} \
            main.go
        done
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Claude Code Proxy ${{ steps.version.outputs.VERSION }}
        body: |
          # Claude Code Proxy ${{ steps.version.outputs.VERSION }}
          
          ## 🎉 新特性
          - 提供 OpenAI 兼容的 API 接口
          - 支持 Claude 3.5 Sonnet 模型
          - 支持流式响应
          - 支持多种部署方式
          
          ## 📦 安装方式
          
          ### 快速安装（推荐）
          
          **Linux/macOS:**
          ```bash
          sudo curl -o /usr/local/bin/claudeproxy -L https://github.com/${{ github.repository }}/releases/latest/download/claudeproxy_`uname -s`_`uname -m`
          sudo chmod +x /usr/local/bin/claudeproxy
          ```
          
          **Windows (PowerShell):**
          ```powershell
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/latest/download/claudeproxy_Windows_x86_64.exe" -OutFile "claudeproxy.exe"
          ```
          
          ### 使用安装脚本
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
          ```
          
          ### 手动下载
          
          选择适合您系统的二进制文件：
          
          - **Linux x86_64**: claudeproxy_Linux_x86_64
          - **Linux ARM64**: claudeproxy_Linux_arm64
          - **macOS Intel**: claudeproxy_Darwin_x86_64
          - **macOS Apple Silicon**: claudeproxy_Darwin_arm64
          - **Windows x86_64**: claudeproxy_Windows_x86_64.exe
          - **Windows ARM64**: claudeproxy_Windows_arm64.exe
          
          ## 🚀 使用方法
          
          1. 配置 API 密钥：
             ```bash
             claudeproxy setup
             ```
          
          2. 启动服务：
             ```bash
             claudeproxy start
             ```
          
          3. 使用 OpenAI 兼容的 API：
             ```bash
             curl -X POST http://localhost:8080/v1/chat/completions \
               -H "Content-Type: application/json" \
               -H "Authorization: Bearer your-api-key" \
               -d '{
                 "model": "claude-3-5-sonnet-20241022",
                 "messages": [
                   {"role": "user", "content": "Hello!"}
                 ]
               }'
             ```
          
          ## 📋 系统要求
          
          - 操作系统: Linux, macOS, Windows
          - 架构: x86_64, ARM64
          - 网络: 需要访问 Anthropic API
          
          ## 🔧 配置说明
          
          详细配置说明请参考项目文档。
          
          ---
          
          **完整源代码**: https://github.com/${{ github.repository }}
          **问题反馈**: https://github.com/${{ github.repository }}/issues
          **使用文档**: https://github.com/${{ github.repository }}/blob/main/README.md
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
